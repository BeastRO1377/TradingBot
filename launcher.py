#!/usr/bin/env python3
"""
Trading Bot Launcher
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã
"""

import asyncio
import argparse
import logging
import os
import sys
import signal
import json
from pathlib import Path
from typing import Dict, Any, List, Optional
import subprocess
import time

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('launcher.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

class BotLauncher:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–æ–º —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.root_dir = Path(__file__).parent
        self.processes: List[subprocess.Popen] = []
        self.running = False
        
    def check_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
        if sys.version_info < (3, 8):
            logger.error("–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        required_files = [
            'main.py',
            'bot_core.py', 
            'config.py',
            'requirements.txt',
            'user_state.json'
        ]
        
        for file in required_files:
            if not (self.root_dir / file).exists():
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: {file}")
                return False
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        venv_path = self.root_dir / '.venv'
        if not venv_path.exists():
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
            try:
                subprocess.run([sys.executable, '-m', 'venv', str(venv_path)], check=True)
                logger.info("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
            except subprocess.CalledProcessError as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
                return False
                
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        pip_path = venv_path / 'bin' / 'pip' if os.name != 'nt' else venv_path / 'Scripts' / 'pip.exe'
        if pip_path.exists():
            logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
            try:
                subprocess.run([str(pip_path), 'install', '-r', 'requirements.txt'], 
                             cwd=self.root_dir, check=True)
                logger.info("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            except subprocess.CalledProcessError as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
                return False
                
        return True
        
    def load_config(self, config_path: Optional[str] = None) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞"""
        if config_path and Path(config_path).exists():
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
        
    def start_bot(self, mode: str = 'trading', config: Optional[Dict[str, Any]] = None) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ: {mode}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞
        python_path = self.root_dir / '.venv' / 'bin' / 'python'
        if os.name == 'nt':  # Windows
            python_path = self.root_dir / '.venv' / 'Scripts' / 'python.exe'
            
        if not python_path.exists():
            python_path = sys.executable
            
        cmd = [str(python_path), 'main.py']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if mode == 'training':
            cmd.append('--train')
        elif mode == 'demo':
            cmd.extend(['--mode', 'demo'])
        elif mode == 'real':
            cmd.extend(['--mode', 'real'])
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env = os.environ.copy()
        env['PYTHONPATH'] = str(self.root_dir)
        env['PYTHONUNBUFFERED'] = '1'
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if config:
            for key, value in config.items():
                env[f'BOT_{key.upper()}'] = str(value)
                
        try:
            process = subprocess.Popen(
                cmd,
                cwd=self.root_dir,
                env=env,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                bufsize=1
            )
            
            self.processes.append(process)
            self.running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–≤–æ–¥–∞
            asyncio.create_task(self._monitor_process(process))
            
            logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å PID: {process.pid}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return False
            
    async def _monitor_process(self, process: subprocess.Popen):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞"""
        try:
            for line in iter(process.stdout.readline, ''):
                if line:
                    print(line.rstrip())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            
    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        self.running = False
        
        for process in self.processes:
            try:
                process.terminate()
                process.wait(timeout=10)
            except subprocess.TimeoutExpired:
                logger.warning("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
                process.kill()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
                
        self.processes.clear()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        def signal_handler(signum, frame):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            self.stop_bot()
            sys.exit(0)
            
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
    def run_interactive(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞"""
        print("\nü§ñ Trading Bot Launcher")
        print("=" * 50)
        
        while True:
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:")
            print("1. –¢–æ—Ä–≥–æ–≤–ª—è (—Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)")
            print("2. –¢–æ—Ä–≥–æ–≤–ª—è (–¥–µ–º–æ —Ä–µ–∂–∏–º)")
            print("3. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
            print("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            print("5. –í—ã—Ö–æ–¥")
            
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-5): ").strip()
            
            if choice == '1':
                if self.check_dependencies():
                    self.setup_signal_handlers()
                    self.start_bot('real')
                    try:
                        while self.running:
                            time.sleep(1)
                    except KeyboardInterrupt:
                        self.stop_bot()
                        
            elif choice == '2':
                if self.check_dependencies():
                    self.setup_signal_handlers()
                    self.start_bot('demo')
                    try:
                        while self.running:
                            time.sleep(1)
                    except KeyboardInterrupt:
                        self.stop_bot()
                        
            elif choice == '3':
                if self.check_dependencies():
                    self.setup_signal_handlers()
                    self.start_bot('training')
                    try:
                        while self.running:
                            time.sleep(1)
                    except KeyboardInterrupt:
                        self.stop_bot()
                        
            elif choice == '4':
                self.check_dependencies()
                
            elif choice == '5':
                print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
                
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='Trading Bot Launcher')
    parser.add_argument('--mode', choices=['trading', 'demo', 'training'], 
                       default='trading', help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞')
    parser.add_argument('--config', type=str, help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--interactive', '-i', action='store_true', 
                       help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º')
    parser.add_argument('--check-deps', action='store_true', 
                       help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏')
    
    args = parser.parse_args()
    
    launcher = BotLauncher()
    
    if args.check_deps:
        if launcher.check_dependencies():
            print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            sys.exit(0)
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏")
            sys.exit(1)
            
    if args.interactive:
        launcher.run_interactive()
    else:
        if launcher.check_dependencies():
            config = launcher.load_config(args.config)
            launcher.setup_signal_handlers()
            launcher.start_bot(args.mode, config)
            
            try:
                while launcher.running:
                    time.sleep(1)
            except KeyboardInterrupt:
                launcher.stop_bot()

if __name__ == '__main__':
    main()
























