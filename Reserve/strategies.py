# strategies.py
import logging
import time
import asyncio
import pandas as pd
import numpy as np

import utils
import ai_ml
import config 

logger = logging.getLogger(__name__)

# ======================================================================
# 1. –î–ò–°–ü–ï–¢–ß–ï–†–´ –°–¢–†–ê–¢–ï–ì–ò–ô
# ======================================================================

async def high_frequency_dispatcher(bot, symbol: str):
    """
    –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö, —Ç–∏–∫–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ä–∞.
    """
    if not await _prereqs_check(bot, symbol):
        return

    mode = bot.strategy_mode
    
    if mode in ("full", "liq_squeeze", "liquidation_only"):
        if await liquidation_strategy(bot, symbol):
            return

    if mode in ("full", "squeeze_only", "golden_squeeze", "liq_squeeze"):
        if await squeeze_strategy(bot, symbol):
            return

async def low_frequency_dispatcher(bot, symbol: str):
    """
    –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–∞—Ö.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É.
    """
    if not await _prereqs_check(bot, symbol):
        return

    mode = bot.strategy_mode
    
    if mode in ("full", "golden_only", "golden_squeeze"):
        await golden_strategy(bot, symbol)

# ======================================================================
# 2. –ü–†–û–í–ï–†–ö–ê –£–°–õ–û–í–ò–ô
# ======================================================================

async def _prereqs_check(bot, symbol: str) -> bool:
    """
    –û–±—â–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.
    """
    if time.time() < bot.strategy_cooldown_until.get(symbol, 0):
        return False
    if symbol in bot.open_positions or symbol in bot.pending_orders:
        return False
    
    # –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ —Ç–µ–ø–µ—Ä—å –±—ã—Å—Ç—Ä—ã–π –±–ª–∞–≥–æ–¥–∞—Ä—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—é
    age = await bot.listing_age_minutes(symbol)
    if age < bot.listing_age_min:
        return False
        
    if symbol in bot.failed_orders and time.time() - bot.failed_orders.get(symbol, 0) < 600:
        return False
        
    return True


# ======================================================================
# 3. –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –°–¢–†–ê–¢–ï–ì–ò–ô
# ======================================================================

async def liquidation_strategy(bot, symbol: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
    """
    signal_key = None
    try:
        liq_buffer = bot.liq_buffers.get(symbol)
        if not liq_buffer: return False

        now = time.time()
        time_window_sec = 10.0
        
        recent_events = [evt for evt in liq_buffer if now - evt['ts'] <= time_window_sec]
        if not recent_events: return False

        dominant_side = recent_events[-1]['side']
        cluster_value = sum(evt['value'] for evt in recent_events if evt['side'] == dominant_side)
        threshold = bot.shared_ws.get_liq_threshold(symbol)

        if cluster_value >= threshold:
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ö–û–ù–¢–†-–¢–†–ï–ù–î–ê ---
            # –ï—Å–ª–∏ –ª–∏–∫–≤–∏–¥–∏—Ä—É—é—Ç –ª–æ–Ω–≥–∏ (Buy), –º—ã —Ö–æ—Ç–∏–º –∫—É–ø–∏—Ç—å –Ω–∞ –¥–Ω–µ.
            # –ï—Å–ª–∏ –ª–∏–∫–≤–∏–¥–∏—Ä—É—é—Ç —à–æ—Ä—Ç—ã (Sell), –º—ã —Ö–æ—Ç–∏–º –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ –ø–∏–∫–µ.
            entry_side = "Buy" if dominant_side == "Buy" else "Sell" 
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–∞ Bybit –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è –ª–æ–Ω–≥–∞ –∏–º–µ–µ—Ç side "Buy", –∞ —à–æ—Ä—Ç–∞ - "Sell".
            # –î–ª—è –∫–æ–Ω—Ç—Ä-—Ç—Ä–µ–Ω–¥–∞ –Ω–∞–º –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ —Ç—É –∂–µ —Å—Ç–æ—Ä–æ–Ω—É, —á—Ç–æ –∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏.
            # –ó–Ω–∞—á–∏—Ç, –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ entry_side = dominant_side –±—ã–ª–∞ –≤–µ—Ä–Ω–æ–π
            # –¥–ª—è –∫–æ–Ω—Ç—Ä-—Ç—Ä–µ–Ω–¥–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ API Bybit.
            # –ú–æ—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–º–µ—Ç–∫–∞ –±—ã–ª–∞ –Ω–µ–≤–µ—Ä–Ω–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –±—ã–ª–æ.
            entry_side = dominant_side
            # --- –ö–û–ù–ï–¶ –ü–û–Ø–°–ù–ï–ù–ò–Ø ---

            signal_key = (symbol, entry_side, 'liquidation_cluster')
            
            if signal_key in bot.active_signals: return True
            bot.active_signals.add(signal_key)

            bot.shared_ws.last_liq_trade_time[symbol] = time.time()
            
            logger.info(f"üíß [{symbol}] –û–ë–ù–ê–†–£–ñ–ï–ù –ö–õ–ê–°–¢–ï–† –õ–ò–ö–í–ò–î–ê–¶–ò–ô! –û–±—ä–µ–º: ${cluster_value:,.0f}. –ü–µ—Ä–µ–¥–∞–Ω–æ AI.")

            features = await bot.extract_realtime_features(symbol)
            if not features:
                bot.active_signals.discard(signal_key)
                return False

            candidate = {
                'symbol': symbol, 'side': entry_side, 'source': 'liquidation_cascade',
                'base_metrics': {'liquidation_value_usd': cluster_value, 'liquidation_side': dominant_side}
            }
            
            asyncio.create_task(bot._process_signal(candidate, features, signal_key))
            return True

    except Exception as e:
        logger.error(f"[liquidation_strategy] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}", exc_info=True)
        if signal_key: bot.active_signals.discard(signal_key)
    
    return False

async def squeeze_strategy(bot, symbol: str) -> bool:
    """
    –ò—â–µ—Ç —Å–∫–≤–∏–∑, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞–¥–µ–∂–Ω—ã–π –∫—É–ª–¥–∞—É–Ω, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ø–∞–º–∞ —Å–∏–≥–Ω–∞–ª–∞–º–∏.
    """
    signal_key = None
    try:
        if not bot._squeeze_allowed(symbol):
            return False
        
        candles = list(bot.shared_ws.candles_data.get(symbol, []))
        if len(candles) < 5:
            return False

        pct_change_5m = utils.compute_pct(candles, 5)

        if abs(pct_change_5m) < config.SQUEEZE_THRESHOLD_PCT:
            return False

        bot.last_squeeze_ts[symbol] = time.time()
        
        impulse_dir = "up" if pct_change_5m > 0 else "down"
        side = "Sell" if impulse_dir == "up" else "Buy"
        signal_key = (symbol, side, 'squeeze')

        if signal_key in bot.active_signals:
            return True
        bot.active_signals.add(signal_key)
        
        logger.info(f"üî• [{symbol}] –û–ë–ù–ê–†–£–ñ–ï–ù –°–ö–í–ò–ó! –î–≤–∏–∂–µ–Ω–∏–µ: {pct_change_5m:.2f}%. –ü–µ—Ä–µ–¥–∞–Ω–æ –û—Ö–æ—Ç–Ω–∏–∫—É.")
        
        full_features = await bot.extract_realtime_features(symbol)
        if not full_features:
            bot.active_signals.discard(signal_key)
            return False

        candidate = {
            "symbol": symbol, "side": side, "source": "squeeze",
            "base_metrics": {'pct_5m': pct_change_5m}
        }
        
        asyncio.create_task(bot._hunt_squeeze_entry_point(candidate, full_features, signal_key))
        return True
        
    except Exception as e:
        logger.error(f"[_squeeze_logic] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}", exc_info=True)
        if signal_key:
            bot.active_signals.discard(signal_key)
        return False

async def golden_strategy(bot, symbol: str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Golden Setup –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑.
    """
    signal_key = None
    try:
        minute_candles = bot.shared_ws.candles_data.get(symbol, [])
        recent = bot._aggregate_candles_5m(minute_candles)
        vol_hist_5m = bot._aggregate_series_5m(list(bot.shared_ws.volume_history.get(symbol, [])), method="sum")
        oi_hist_5m  = bot._aggregate_series_5m(list(bot.shared_ws.oi_history.get(symbol, [])), method="last")
        cvd_hist_5m = bot._aggregate_series_5m(list(bot.shared_ws.cvd_history.get(symbol, [])), method="sum")

        if not recent: return

        buy_params = await bot._get_golden_thresholds(symbol, "Buy")
        sell_params = await bot._get_golden_thresholds(symbol, "Sell")
        period_iters = max(int(buy_params["period_iters"]), int(sell_params["period_iters"]))

        if not all(len(hist) > period_iters for hist in [recent, vol_hist_5m, oi_hist_5m, cvd_hist_5m]):
            return

        action = None
        price_change_pct, volume_change_pct, oi_change_pct = 0.0, 0.0, 0.0

        sell_period = int(sell_params["period_iters"])
        price_change_pct_sell = (recent[-1]["closePrice"] / recent[-1 - sell_period]["closePrice"] - 1) * 100
        volume_change_pct_sell = (vol_hist_5m[-1] / vol_hist_5m[-1 - sell_period] - 1) * 100 if vol_hist_5m[-1 - sell_period] else 0
        oi_change_pct_sell = (oi_hist_5m[-1] / oi_hist_5m[-1 - sell_period] - 1) * 100 if oi_hist_5m[-1 - sell_period] else 0
        
        if (price_change_pct_sell <= -sell_params["price_change"] and
            volume_change_pct_sell >= sell_params["volume_change"] and
            oi_change_pct_sell >= sell_params["oi_change"]):
            action = "Sell"
            price_change_pct, volume_change_pct, oi_change_pct = price_change_pct_sell, volume_change_pct_sell, oi_change_pct_sell

        if action is None:
            buy_period = int(buy_params["period_iters"])
            price_change_pct_buy = (recent[-1]["closePrice"] / recent[-1 - buy_period]["closePrice"] - 1) * 100
            volume_change_pct_buy = (vol_hist_5m[-1] / vol_hist_5m[-1 - buy_period] - 1) * 100 if vol_hist_5m[-1 - buy_period] else 0
            oi_change_pct_buy = (oi_hist_5m[-1] / oi_hist_5m[-1 - buy_period] - 1) * 100 if oi_hist_5m[-1 - buy_period] else 0

            if (price_change_pct_buy >= buy_params["price_change"] and
                volume_change_pct_buy >= buy_params["volume_change"] and
                oi_change_pct_buy >= buy_params["oi_change"]):
                action = "Buy"
                price_change_pct, volume_change_pct, oi_change_pct = price_change_pct_buy, volume_change_pct_buy, oi_change_pct_buy

        if action:
            signal_key = (symbol, action, 'golden_setup')
            if signal_key in bot.active_signals: return
            bot.active_signals.add(signal_key)

            features = await bot.extract_realtime_features(symbol)
            if not features: return

            cvd_change_pct = (cvd_hist_5m[-1] - cvd_hist_5m[-1 - period_iters]) / abs(cvd_hist_5m[-1 - period_iters] or 1) * 100
            
            candidate = {
                'symbol': symbol, 'side': action, 'source': 'golden_setup',
                'base_metrics': {
                    'pct_5m': price_change_pct, 'vol_change_pct': volume_change_pct,
                    'oi_change_pct': oi_change_pct, 'cvd_change_pct': cvd_change_pct
                }
            }
            funding_snap = bot._apply_funding_to_features(symbol, features)
            bot._apply_funding_to_candidate(candidate, funding_snap)
            
            asyncio.create_task(bot._process_signal(candidate, features, signal_key))

    except Exception as e:
        logger.error(f"[_golden_logic] unexpected error for {symbol}: {e}", exc_info=True)
        if signal_key:
            bot.active_signals.discard(signal_key)