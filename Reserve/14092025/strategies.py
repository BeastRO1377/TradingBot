# strategies.py
import logging
import time
import asyncio
import pandas as pd
import numpy as np

import utils
import ai_ml
import config 

logger = logging.getLogger(__name__)

# ======================================================================
# 1. –î–ò–°–ü–ï–¢–ß–ï–†–´ –°–¢–†–ê–¢–ï–ì–ò–ô
# ======================================================================

async def high_frequency_dispatcher(bot, symbol: str):
    """
    –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö, —Ç–∏–∫–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.
    """
    if not await _prereqs_check(bot, symbol):
        return

    mode = bot.strategy_mode
    
    if mode in ("full", "liq_squeeze", "liquidation_only"):
        if await liquidation_strategy(bot, symbol):
            return
        
        # –£—Å–ª–æ–≤–∏–µ –¥–ª—è —Å–∫–≤–∏–∑–æ–≤:
    if mode in ("full", "squeeze_only", "golden_squeeze", "liq_squeeze"):
        await squeeze_strategy(bot, symbol)


async def low_frequency_dispatcher(bot, symbol: str):
    """
    –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–∞—Ö.
    """
    if not await _prereqs_check(bot, symbol):
        return

    mode = bot.strategy_mode
    

    if mode in ("full", "golden_only", "golden_squeeze"):
        await golden_strategy(bot, symbol)

# ======================================================================
# 2. –ü–†–û–í–ï–†–ö–ê –£–°–õ–û–í–ò–ô
# ======================================================================

async def _prereqs_check(bot, symbol: str) -> bool:
    """
    –û–±—â–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.
    """
    if time.time() < bot.strategy_cooldown_until.get(symbol, 0):
        return False
    if symbol in bot.open_positions or symbol in bot.pending_orders:
        return False
    
    # –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ —Ç–µ–ø–µ—Ä—å –±—ã—Å—Ç—Ä—ã–π –±–ª–∞–≥–æ–¥–∞—Ä—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—é
    age = await bot.listing_age_minutes(symbol)
    if age < bot.listing_age_min:
        return False
        
    if symbol in bot.failed_orders and time.time() - bot.failed_orders.get(symbol, 0) < 600:
        return False
        
    return True


# ======================================================================
# 3. –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –°–¢–†–ê–¢–ï–ì–ò–ô
# ======================================================================

async def liquidation_strategy(bot, symbol: str) -> bool:
    """
    [–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø] –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä—ã –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π –∏ –≤—Ö–æ–¥–∏—Ç –ü–†–û–¢–ò–í –Ω–∏—Ö.
    """
    signal_key = None
    try:
        liq_buffer = bot.liq_buffers.get(symbol)
        if not liq_buffer: return False

        now = time.time()
        time_window_sec = 10.0
        
        recent_events = [evt for evt in liq_buffer if now - evt['ts'] <= time_window_sec]
        if len(recent_events) < 2: return False # –ù—É–∂–µ–Ω –∫–ª–∞—Å—Ç–µ—Ä, –∞ –Ω–µ –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ

        # –°—á–∏—Ç–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
        buy_liq_value = sum(evt['value'] for evt in recent_events if evt['side'] == 'Buy')
        sell_liq_value = sum(evt['value'] for evt in recent_events if evt['side'] == 'Sell')
        
        threshold = bot.shared_ws.get_liq_threshold(symbol)
        
        entry_side = None
        cluster_value = 0
        dominant_side = ''

        # --- –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–ì–ò–ö–ò ---
        if buy_liq_value >= threshold:
            # –õ–∏–∫–≤–∏–¥–∏—Ä—É—é—Ç —à–æ—Ä—Ç—ã (—Ä—ã–Ω–æ–∫ –ø–æ–∫—É–ø–∞–µ—Ç), —Ü–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç. –ú—ã —Ö–æ—Ç–∏–º –ü–†–û–î–ê–¢–¨.
            entry_side = "Sell"
            cluster_value = buy_liq_value
            dominant_side = "Buy" # –õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –±—ã–ª–∏ –±–∞–π-—Å–∞–π–¥–æ–≤—ã–µ
        elif sell_liq_value >= threshold:
            # –õ–∏–∫–≤–∏–¥–∏—Ä—É—é—Ç –ª–æ–Ω–≥–∏ (—Ä—ã–Ω–æ–∫ –ø—Ä–æ–¥–∞–µ—Ç), —Ü–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç. –ú—ã —Ö–æ—Ç–∏–º –ö–£–ü–ò–¢–¨.
            entry_side = "Buy"
            cluster_value = sell_liq_value
            dominant_side = "Sell" # –õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –±—ã–ª–∏ —Å–µ–ª–ª-—Å–∞–π–¥–æ–≤—ã–µ

        if not entry_side:
            return False # –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞

        # –°–∏–≥–Ω–∞–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω!
        signal_key = (symbol, entry_side, 'liquidation_cluster')
        
        if signal_key in bot.active_signals: return True
        bot.active_signals.add(signal_key)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
        bot.shared_ws.last_liq_trade_time[symbol] = time.time()
        
        logger.info(f"üíß [{symbol}] –û–ë–ù–ê–†–£–ñ–ï–ù –ö–õ–ê–°–¢–ï–† –õ–ò–ö–í–ò–î–ê–¶–ò–ô ({dominant_side})! –û–±—ä–µ–º: ${cluster_value:,.0f}. –í—Ö–æ–¥ –≤ {entry_side}. –ü–µ—Ä–µ–¥–∞–Ω–æ AI.")

        features = await bot.extract_realtime_features(symbol)
        if not features:
            bot.active_signals.discard(signal_key)
            return False

        candidate = {
            'symbol': symbol, 'side': entry_side, 'source': 'liquidation_cascade',
            'base_metrics': {'liquidation_value_usd': cluster_value, 'liquidation_side': dominant_side}
        }
        
        asyncio.create_task(bot._process_signal(candidate, features, signal_key))
        return True

    except Exception as e:
        logger.error(f"[liquidation_strategy] –û—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}", exc_info=True)
        if signal_key: bot.active_signals.discard(signal_key)
    
    return False



async def squeeze_strategy(bot, symbol: str) -> bool:
    """
    [–ò–ù–¢–†–ê-–°–í–ï–ß–ù–ê–Ø –í–ï–†–°–ò–Ø] –ò—â–µ—Ç –∞–Ω–æ–º–∞–ª—å–Ω–æ –±–æ–ª—å—à—É—é –û–î–ù–£ –º–∏–Ω—É—Ç–Ω—É—é —Å–≤–µ—á—É
    –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Ç–∫–∞—Ç–µ.
    """
    signal_key = None
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫—É–ª–¥–∞—É–Ω, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —Å–∏–≥–Ω–∞–ª–∞–º–∏
        if not bot._squeeze_allowed(symbol):
            return False
        
        candles = list(bot.shared_ws.candles_data.get(symbol, []))
        # –ù–∞–º –Ω—É–∂–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞—è —Å–≤–µ—á–∞
        if len(candles) < 1:
            return False

        # --- –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –ü–û–°–õ–ï–î–ù–Æ–Æ –ú–ò–ù–£–¢–ù–£–Æ –°–í–ï–ß–£ ---
        last_candle = candles[-1]
        open_price = utils.safe_to_float(last_candle.get("openPrice"))
        close_price = utils.safe_to_float(last_candle.get("closePrice"))

        if open_price == 0: return False

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¢–ï–õ–ê —Å–≤–µ—á–∏
        pct_change_1m_body = ((close_price - open_price) / open_price) * 100.0

        # –ü–æ—Ä–æ–≥ –¥–ª—è –º–∏–Ω—É—Ç–Ω–æ–π —Å–≤–µ—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ, —á–µ–º –¥–ª—è 5-–º–∏–Ω—É—Ç–Ω–æ–π.
        # 1.5% - 2.5% - —Ö–æ—Ä–æ—à–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞.
        SQUEEZE_1M_THRESHOLD = 2.0 

        if abs(pct_change_1m_body) < SQUEEZE_1M_THRESHOLD:
            return False # –°–≤–µ—á–∞ –Ω–µ –∞–Ω–æ–º–∞–ª—å–Ω–∞—è, –≤—ã—Ö–æ–¥–∏–º

        # --- –°–ò–ì–ù–ê–õ –û–ë–ù–ê–†–£–ñ–ï–ù! ---
        bot.last_squeeze_ts[symbol] = time.time()
        
        impulse_dir = "up" if pct_change_1m_body > 0 else "down"
        side = "Sell" if impulse_dir == "up" else "Buy"
        signal_key = (symbol, side, 'squeeze_1m') # –ú–µ–Ω—è–µ–º –∫–ª—é—á –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏

        if signal_key in bot.active_signals:
            return True
        bot.active_signals.add(signal_key)
        
        logger.info(f"üî• [{symbol}] –û–ë–ù–ê–†–£–ñ–ï–ù –ò–ù–¢–†–ê-–°–í–ï–ß–ù–û–ô –°–ö–í–ò–ó! –î–≤–∏–∂–µ–Ω–∏–µ 1m: {pct_change_1m_body:.2f}%. –ü–µ—Ä–µ–¥–∞–Ω–æ AI-–∞–Ω–∞–ª–∏—Ç–∏–∫—É.")
        
        full_features = await bot.extract_realtime_features(symbol)
        if not full_features:
            bot.active_signals.discard(signal_key)
            return False

        candidate = {
            "symbol": symbol, "side": side, "source": "squeeze",
            # –ü–µ—Ä–µ–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑–≤–∞–ª–∞ —Å–∏–≥–Ω–∞–ª
            "base_metrics": {'pct_1m_body': pct_change_1m_body} 
        }
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å—Ç–∏—Ç "–û—Ö–æ—Ç–Ω–∏–∫–∞"
        asyncio.create_task(bot._process_signal(candidate, full_features, signal_key))
        return True
        
    except Exception as e:
        logger.error(f"[_squeeze_logic_1m] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}", exc_info=True)
        if signal_key:
            bot.active_signals.discard(signal_key)
        return False



# async def golden_strategy(bot, symbol: str):
#     """
#     –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Golden Setup –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑.
#     """
#     signal_key = None
#     try:
#         minute_candles = bot.shared_ws.candles_data.get(symbol, [])
#         recent = bot._aggregate_candles_5m(minute_candles)
#         vol_hist_5m = bot._aggregate_series_5m(list(bot.shared_ws.volume_history.get(symbol, [])), method="sum")
#         oi_hist_5m  = bot._aggregate_series_5m(list(bot.shared_ws.oi_history.get(symbol, [])), method="last")
#         cvd_hist_5m = bot._aggregate_series_5m(list(bot.shared_ws.cvd_history.get(symbol, [])), method="sum")

#         if not recent: return

#         buy_params = await bot._get_golden_thresholds(symbol, "Buy")
#         sell_params = await bot._get_golden_thresholds(symbol, "Sell")
#         period_iters = max(int(buy_params["period_iters"]), int(sell_params["period_iters"]))

#         if not all(len(hist) > period_iters for hist in [recent, vol_hist_5m, oi_hist_5m, cvd_hist_5m]):
#             return

#         action = None
#         price_change_pct, volume_change_pct, oi_change_pct = 0.0, 0.0, 0.0

#         sell_period = int(sell_params["period_iters"])
#         price_change_pct_sell = (recent[-1]["closePrice"] / recent[-1 - sell_period]["closePrice"] - 1) * 100
#         volume_change_pct_sell = (vol_hist_5m[-1] / vol_hist_5m[-1 - sell_period] - 1) * 100 if vol_hist_5m[-1 - sell_period] else 0
#         oi_change_pct_sell = (oi_hist_5m[-1] / oi_hist_5m[-1 - sell_period] - 1) * 100 if oi_hist_5m[-1 - sell_period] else 0
        
#         if (price_change_pct_sell <= -sell_params["price_change"] and
#             volume_change_pct_sell >= sell_params["volume_change"] and
#             oi_change_pct_sell >= sell_params["oi_change"]):
#             action = "Sell"
#             price_change_pct, volume_change_pct, oi_change_pct = price_change_pct_sell, volume_change_pct_sell, oi_change_pct_sell

#         if action is None:
#             buy_period = int(buy_params["period_iters"])
#             price_change_pct_buy = (recent[-1]["closePrice"] / recent[-1 - buy_period]["closePrice"] - 1) * 100
#             volume_change_pct_buy = (vol_hist_5m[-1] / vol_hist_5m[-1 - buy_period] - 1) * 100 if vol_hist_5m[-1 - buy_period] else 0
#             oi_change_pct_buy = (oi_hist_5m[-1] / oi_hist_5m[-1 - buy_period] - 1) * 100 if oi_hist_5m[-1 - buy_period] else 0

#             if (price_change_pct_buy >= buy_params["price_change"] and
#                 volume_change_pct_buy >= buy_params["volume_change"] and
#                 oi_change_pct_buy >= buy_params["oi_change"]):
#                 action = "Buy"
#                 price_change_pct, volume_change_pct, oi_change_pct = price_change_pct_buy, volume_change_pct_buy, oi_change_pct_buy

#         if action:
#             signal_key = (symbol, action, 'golden_setup')
#             if signal_key in bot.active_signals: return
#             bot.active_signals.add(signal_key)

#             features = await bot.extract_realtime_features(symbol)
#             if not features: return

#             cvd_change_pct = (cvd_hist_5m[-1] - cvd_hist_5m[-1 - period_iters]) / abs(cvd_hist_5m[-1 - period_iters] or 1) * 100
            
#             candidate = {
#                 'symbol': symbol, 'side': action, 'source': 'golden_setup',
#                 'base_metrics': {
#                     'pct_5m': price_change_pct, 'vol_change_pct': volume_change_pct,
#                     'oi_change_pct': oi_change_pct, 'cvd_change_pct': cvd_change_pct
#                 }
#             }
#             funding_snap = bot._apply_funding_to_features(symbol, features)
#             bot._apply_funding_to_candidate(candidate, funding_snap)
            
#             asyncio.create_task(bot._process_signal(candidate, features, signal_key))

#     except Exception as e:
#         logger.error(f"[_golden_logic] unexpected error for {symbol}: {e}", exc_info=True)
#         if signal_key:
#             bot.active_signals.discard(signal_key)


async def golden_strategy(bot, symbol: str):
    """
    [GOLDEN SETUP V3 - COILED SPRING] –ò—â–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–∫—Ä—ã—Ç–æ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è:
    —Ä–æ—Å—Ç –û–ò –ø—Ä–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ü–µ–Ω–µ, —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –≤—Å–ø–ª–µ—Å–∫–æ–º –æ–±—ä–µ–º–∞.
    """
    signal_key = None
    try:
        # –ö—É–ª–¥–∞—É–Ω, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –ø–æ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ —Å–∏—Ç—É–∞—Ü–∏–∏
        if time.time() < bot._last_golden_ts.get(symbol, 0) + 300: # –ö—É–ª–¥–∞—É–Ω 5 –º–∏–Ω—É—Ç
            return

        # –ù–∞–º –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ö–æ—Ç—è –±—ã –∑–∞ 5 –º–∏–Ω—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        candles = list(bot.shared_ws.candles_data.get(symbol, []))
        oi_history = list(bot.shared_ws.oi_history.get(symbol, []))
        if len(candles) < 5 or len(oi_history) < 5:
            return

        # --- –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∑—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç) ---
        
        # –£—Å–ª–æ–≤–∏–µ 1: –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã
        price_start = utils.safe_to_float(candles[-5].get("openPrice"))
        price_end = utils.safe_to_float(candles[-1].get("closePrice"))
        if price_start == 0: return
        price_change_5m_pct = abs((price_end - price_start) / price_start) * 100.0
        is_price_stable = price_change_5m_pct < 0.8 # –¶–µ–Ω–∞ –∑–∞ 5 –º–∏–Ω –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –º–µ–Ω–µ–µ —á–µ–º –Ω–∞ 0.8%

        # –£—Å–ª–æ–≤–∏–µ 2: –†–æ—Å—Ç –û—Ç–∫—Ä—ã—Ç–æ–≥–æ –ò–Ω—Ç–µ—Ä–µ—Å–∞
        oi_start = utils.safe_to_float(oi_history[-5])
        oi_end = utils.safe_to_float(oi_history[-1])
        if oi_start == 0: return
        oi_change_5m_pct = ((oi_end - oi_start) / oi_start) * 100.0
        is_oi_growing = oi_change_5m_pct > 1.0 # –û–ò –∑–∞ 5 –º–∏–Ω –≤—ã—Ä–æ—Å –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1%

        # --- –®–∞–≥ 2: –ü–æ–∏—Å–∫ "–∏—Å–∫—Ä—ã" –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–Ω—É—Ç–µ ---
        
        # –£—Å–ª–æ–≤–∏–µ 3: –í—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–µ
        last_candle_volume = utils.safe_to_float(candles[-1].get("volume"))
        avg_volume_prev_4m = np.mean([utils.safe_to_float(c.get("volume", 0)) for c in candles[-5:-1]])
        if avg_volume_prev_4m == 0: return
        VOLUME_MULTIPLIER = 2.0
        is_volume_spike = last_candle_volume > (avg_volume_prev_4m * VOLUME_MULTIPLIER)

        # --- –®–∞–≥ 3: –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è ---
        if not (is_price_stable and is_oi_growing and is_volume_spike):
            return # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, —ç—Ç–æ –Ω–µ –Ω–∞—à —Å–µ—Ç–∞–ø

        # –°–ò–ì–ù–ê–õ –û–ë–ù–ê–†–£–ñ–ï–ù!
        bot._last_golden_ts[symbol] = time.time()
        
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ü–≤–µ—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π "–∏—Å–∫—Ä–æ–≤–æ–π" —Å–≤–µ—á–∏
        side = "Buy" if price_end >= candles[-1]['openPrice'] else "Sell"
        signal_key = (symbol, side, 'golden_setup_v3')

        if signal_key in bot.active_signals: return
        bot.active_signals.add(signal_key)

        logger.info(f"üèÜ [{symbol}] GOLDEN SETUP V3 (–°–∂–∞—Ç–∞—è –ø—Ä—É–∂–∏–Ω–∞)! OIŒî(5m): {oi_change_5m_pct:+.2f}%, –¶–µ–Ω–∞Œî(5m): {price_change_5m_pct:.2f}%, Vol Spike: x{(last_candle_volume/avg_volume_prev_4m):.1f}. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {side}.")

        full_features = await bot.extract_realtime_features(symbol)
        if not full_features:
            bot.active_signals.discard(signal_key)
            return

        candidate = {
            "symbol": symbol, "side": side, "source": "golden_setup",
            "base_metrics": { 'oi_change_5m_pct': oi_change_5m_pct }
        }
        
        asyncio.create_task(bot._process_signal(candidate, full_features, signal_key))

    except Exception as e:
        logger.error(f"[golden_strategy_v3] –û—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}", exc_info=True)
        if signal_key:
            bot.active_signals.discard(signal_key)



# async def golden_strategy(bot, symbol: str):
#     """
#     [–ù–û–í–ê–Ø –í–ï–†–°–ò–Ø] –ò—â–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è/—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:
#     –∞–Ω–æ–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–∏ –º–∞–ª–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã.
#     """
#     signal_key = None
#     try:
#         # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π, –±–æ–ª–µ–µ —á–∞—Å—Ç—ã–π –∫—É–ª–¥–∞—É–Ω –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
#         if time.time() < bot._last_golden_ts.get(symbol, 0) + 180: # –ö—É–ª–¥–∞—É–Ω 3 –º–∏–Ω—É—Ç—ã
#             return

#         candles = list(bot.shared_ws.candles_data.get(symbol, []))
#         # –ù–∞–º –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 30 —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä–µ–º–∞
#         if len(candles) < 30:
#             return

#         # --- –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–Ω—É—Ç–Ω–æ–π —Å–≤–µ—á–∏ ---
#         last_candle = candles[-1]
#         open_price = utils.safe_to_float(last_candle.get("openPrice"))
#         close_price = utils.safe_to_float(last_candle.get("closePrice"))
#         current_volume = utils.safe_to_float(last_candle.get("volume"))

#         if open_price == 0 or current_volume == 0:
#             return

#         # --- –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π ---
#         # –£—Å–ª–æ–≤–∏–µ 1: –ê–Ω–æ–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
#         # –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 29 –º–∏–Ω—É—Ç
#         avg_volume_29m = np.mean([utils.safe_to_float(c.get("volume", 0)) for c in candles[-30:-1]])
#         if avg_volume_29m == 0: return # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å

#         # –û–±—ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –≤ 2.5 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
#         VOLUME_MULTIPLIER = 2.5
#         is_volume_anomaly = current_volume > (avg_volume_29m * VOLUME_MULTIPLIER)

#         # –£—Å–ª–æ–≤–∏–µ 2: –ú–∞–ª–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
#         price_change_pct = abs((close_price - open_price) / open_price) * 100.0
#         is_price_stable = price_change_pct < 0.7 # –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –º–µ–Ω–µ–µ —á–µ–º –Ω–∞ 0.7%

#         # --- –®–∞–≥ 3: –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ ---
#         if not (is_volume_anomaly and is_price_stable):
#             return # –ï—Å–ª–∏ –æ–±–∞ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –≤—ã—Ö–æ–¥–∏–º

#         # –°–∏–≥–Ω–∞–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω!
#         bot._last_golden_ts[symbol] = time.time() # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω

#         # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Ü–≤–µ—Ç—É —Å–≤–µ—á–∏
#         side = "Buy" if close_price >= open_price else "Sell"
#         signal_key = (symbol, side, 'golden_setup_v2')

#         if signal_key in bot.active_signals: return
#         bot.active_signals.add(signal_key)

#         logger.info(f"üèÜ [{symbol}] GOLDEN SETUP! –ê–Ω–æ–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º {current_volume:,.0f} (x{current_volume/avg_volume_29m:.1f}) –ø—Ä–∏ Œî–¶–µ–Ω—ã {price_change_pct:.2f}%. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {side}. –ü–µ—Ä–µ–¥–∞–Ω–æ AI.")

#         full_features = await bot.extract_realtime_features(symbol)
#         if not full_features:
#             bot.active_signals.discard(signal_key)
#             return

#         candidate = {
#             "symbol": symbol, "side": side, "source": "golden_setup",
#             "base_metrics": {
#                 'price_change_1m': price_change_pct,
#                 'volume_anomaly_vs_30m': current_volume / avg_volume_29m
#             }
#         }
        
#         # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è AI
#         asyncio.create_task(bot._process_signal(candidate, full_features, signal_key))

#     except Exception as e:
#         logger.error(f"[golden_strategy_v2] –û—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}", exc_info=True)
#         if signal_key:
#             bot.active_signals.discard(signal_key)
