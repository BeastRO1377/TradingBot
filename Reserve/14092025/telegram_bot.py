# telegram_bot.py
import json
import pathlib
import logging
import time

from aiogram import F, Router, types, Bot, Dispatcher
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup
from aiogram.filters import Command
from aiogram.enums import ParseMode

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
import config
import utils

logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram ---
# !!! –í–ê–ñ–ù–û: –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ –¢–û–ö–ï–ù –ù–ê –í–ê–® !!!
TELEGRAM_BOT_TOKEN = "5833594543:AAE8BXe2G3tmvZTixAHGhGKzJIPN66P64a4" 

try:
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    dp = Dispatcher()
    router = Router()
    router_admin = Router()
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
    dp.include_router(router)
    dp.include_router(router_admin)
except Exception as e:
    logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram Bot: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.")
    bot = None
    dp = None
    router = None
    router_admin = None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç–∞–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
GLOBAL_BOTS: list = []

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON ---

def load_user_state() -> dict:
    if config.USER_STATE_FILE.exists():
        with config.USER_STATE_FILE.open("r", encoding="utf-8") as fp:
            try:
                return json.load(fp)
            except json.JSONDecodeError:
                return {}
    return {}

def save_user_state(data: dict) -> None:
    with config.USER_STATE_FILE.open("w", encoding="utf-8") as fp:
        json.dump(data, fp, ensure_ascii=False, indent=4)

def _load_json(path: pathlib.Path):
    if path.exists():
        with path.open("r", encoding="utf-8") as fp:
            try:
                return json.load(fp)
            except json.JSONDecodeError:
                return None
    return None

def _user_slice(all_data: dict, user_id: int | str, default=None):
    if all_data is None:
        return default
    return all_data.get(str(user_id), default)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---

def get_positions_summary(user_id: int) -> str:
    all_positions = _load_json(config.OPEN_POS_JSON)
    user_positions = _user_slice(all_positions, user_id, [])
    
    if not user_positions:
        return "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π."
        
    lines = ["ü™ô <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:</b>"]
    total_pnl = 0.0
    for pos in user_positions:
        sym = pos.get("symbol")
        size = pos.get("size")
        pnl = utils.safe_to_float(pos.get("pnl", 0.0))
        total_pnl += pnl
        lines.append(f"‚Ä¢ <code>{sym:<10}</code> | Vol: {size} | PnL: {pnl:+.2f}$")
    lines.append(f"\n<b>–ò—Ç–æ–≥–æ PnL: {total_pnl:+.2f}$</b>")
    return "\n".join(lines)

def get_wallet_summary(user_id: int) -> str:
    all_wallets = _load_json(config.WALLET_JSON)
    wallet = _user_slice(all_wallets, user_id, {})
    if not wallet:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞."
    bal = wallet.get("totalEquity", "‚Äî")
    avail = wallet.get("availableBalance", "‚Äî")
    used = wallet.get("usedMargin", "‚Äî")
    return (
        "üí∞ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞</b>\n"
        f"Equity: <code>{bal}</code>\n"
        f"Available: <code>{avail}</code>\n"
        f"Used margin: <code>{used}</code>"
    )

def _trades_change(hours: int, user_id: int) -> str:
    all_trades = _load_json(config.TRADES_JSON)
    user_trades = _user_slice(all_trades, user_id, [])
    if not user_trades:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö."
    from datetime import datetime, timedelta
    cutoff = datetime.utcnow() - timedelta(hours=hours)
    
    pnl = sum(
        utils.safe_to_float(t.get("pnl", 0.0)) for t in user_trades
        if "timestamp" in t and datetime.fromisoformat(t["timestamp"].split('.')[0]) >= cutoff
    )
    return f"–°—É–º–º–∞—Ä–Ω—ã–π PnL –∑–∞ {hours}—á: <b>{pnl:+.2f}$</b>"

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def get_main_menu_keyboard():
    kb = [
        [types.KeyboardButton(text="–¢–æ—Ä–≥–æ–≤–ª—è"), types.KeyboardButton(text="–ë–æ—Ç")],
        [types.KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), types.KeyboardButton(text="–°–µ—Ä–≤–∏—Å")],
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def get_trading_menu_keyboard():
    kb = [
        [types.KeyboardButton(text="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ API")],
        [types.KeyboardButton(text="–û–±—â–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –æ–±—ä—ë–º")],
        [types.KeyboardButton(text="–û–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏")],
        [types.KeyboardButton(text="–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏")],
        [types.KeyboardButton(text="–†–µ–∂–∏–º")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def get_bot_menu_keyboard():
    kb = [
        [types.KeyboardButton(text="–°—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–π")],
        [types.KeyboardButton(text="–†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã")],
        [types.KeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç"), types.KeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç")],
        [types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø"), types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–π–ª–∏–Ω–≥-gap")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def get_info_menu_keyboard():
    kb = [
        [types.KeyboardButton(text="–î–∞–Ω–Ω—ã–µ –ø–æ –∫–æ—à–µ–ª—å–∫—É")],
        [types.KeyboardButton(text="–°–¥–µ–ª–∫–∏ –∑–∞ —Å—É—Ç–∫–∏")],
        [types.KeyboardButton(text="–°–¥–µ–ª–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é"), types.KeyboardButton(text="–°–¥–µ–ª–∫–∏ –∑–∞ –º–µ—Å—è—Ü")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def get_service_menu_keyboard():
    kb = [
        [types.KeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

# --- FSM –°—Ç–µ–π—Ç—ã ---

class UpdateAPIStates(StatesGroup):
    waiting_api_key = State()
    waiting_api_secret = State()

class MaxVolumeStates(StatesGroup):
    waiting_max_volume = State()

class PositionVolumeStates(StatesGroup):
    waiting_volume = State()

class StrategyModeStates(StatesGroup):
    waiting_mode = State()

class FeedbackStates(StatesGroup):
    waiting_message = State()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –º–µ–Ω—é ---

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_keyboard())

# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é ---
@router.message(F.text == "–¢–æ—Ä–≥–æ–≤–ª—è")
async def show_trading_menu(message: Message):
    await message.answer("–†–∞–∑–¥–µ–ª ¬´–¢–æ—Ä–≥–æ–≤–ª—è¬ª", reply_markup=get_trading_menu_keyboard())

@router.message(F.text == "–ë–æ—Ç")
async def show_bot_menu(message: Message):
    await message.answer("–†–∞–∑–¥–µ–ª ¬´–ë–æ—Ç¬ª", reply_markup=get_bot_menu_keyboard())

@router.message(F.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def show_info_menu(message: Message):
    await message.answer("–†–∞–∑–¥–µ–ª ¬´–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è¬ª", reply_markup=get_info_menu_keyboard())

@router.message(F.text == "–°–µ—Ä–≤–∏—Å")
async def show_service_menu(message: Message):
    await message.answer("–†–∞–∑–¥–µ–ª ¬´–°–µ—Ä–≤–∏—Å¬ª", reply_markup=get_service_menu_keyboard())

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_keyboard())

# --- –†–∞–∑–¥–µ–ª ¬´–¢–æ—Ä–≥–æ–≤–ª—è¬ª ---
@router.message(F.text == "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ API")
async def trading_update_api(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API_KEY:")
    await state.set_state(UpdateAPIStates.waiting_api_key)

@router.message(UpdateAPIStates.waiting_api_key)
async def trading_update_api_key(message: Message, state: FSMContext):
    await state.update_data(new_api_key=message.text.strip())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API_SECRET:")
    await state.set_state(UpdateAPIStates.waiting_api_secret)

@router.message(UpdateAPIStates.waiting_api_secret)
async def trading_update_api_secret(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = str(message.from_user.id)
    all_state = load_user_state()
    user_data = all_state.get(user_id, {})
    user_data["api_key"] = data["new_api_key"]
    user_data["api_secret"] = message.text.strip()
    all_state[user_id] = user_data
    save_user_state(all_state)
    await message.answer("‚úÖ –ö–ª—é—á–∏ API –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=get_trading_menu_keyboard())
    await state.clear()

@router.message(F.text == "–†–µ–∂–∏–º")
async def trading_mode_menu(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ '–ë–æ–µ–≤–æ–π' –∏–ª–∏ '–î–µ–º–æ'.
    """
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [types.KeyboardButton(text="–ë–æ–µ–≤–æ–π (Real)")],
        [types.KeyboardButton(text="–î–µ–º–æ (Demo)")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ])
    
    user_id = str(message.from_user.id)
    all_state = load_user_state()
    current_mode = all_state.get(user_id, {}).get("mode", "real")
    
    await message.answer(
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: <b>{current_mode.upper()}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º. <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–∏–ª—É "
        "–ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )

@router.message(F.text.in_({"–ë–æ–µ–≤–æ–π (Real)", "–î–µ–º–æ (Demo)"}))
async def trading_set_mode(message: Message):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤ user_state.json.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    new_mode = "real" if "Real" in message.text else "demo"
    
    user_id = str(message.from_user.id)
    all_state = load_user_state()
    user_data = all_state.get(user_id, {})
    
    user_data["mode"] = new_mode
    all_state[user_id] = user_data
    save_user_state(all_state)
    
    await message.answer(
        f"‚úÖ –†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ <b>{new_mode.upper()}</b>.\n\n"
        "‚ÄºÔ∏è <b>–¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–õ–ù–´–ô –ü–ï–†–ï–ó–ê–ü–£–°–ö –ë–û–¢–ê</b>, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É.",
        reply_markup=get_trading_menu_keyboard(),
        parse_mode=ParseMode.HTML
    )



@router.message(F.text == "–û–±—â–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –æ–±—ä—ë–º")
async def trading_max_volume(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ–±—â–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –æ–±—ä—ë–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5000):")
    await state.set_state(MaxVolumeStates.waiting_max_volume)

@router.message(MaxVolumeStates.waiting_max_volume)
async def trading_set_max_volume(message: Message, state: FSMContext):
    try:
        max_vol = float(message.text.replace(",", "."))
        user_id = str(message.from_user.id)
        all_state = load_user_state()
        user_data = all_state.get(user_id, {})
        user_data["max_total_volume"] = max_vol
        all_state[user_id] = user_data
        save_user_state(all_state)
        await message.answer(f"‚úÖ –û–±—â–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –æ–±—ä—ë–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {max_vol}", reply_markup=get_trading_menu_keyboard())
        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(F.text == "–û–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏")
async def trading_position_volume(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ–±—ä—ë–º –¥–ª—è –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000):")
    await state.set_state(PositionVolumeStates.waiting_volume)

@router.message(PositionVolumeStates.waiting_volume)
async def trading_set_position_volume(message: Message, state: FSMContext):
    try:
        vol = float(message.text.replace(",", "."))
        user_id = str(message.from_user.id)
        all_state = load_user_state()
        user_data = all_state.get(user_id, {})
        user_data["volume"] = vol
        all_state[user_id] = user_data
        save_user_state(all_state)
        await message.answer(f"‚úÖ –û–±—ä—ë–º –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {vol}", reply_markup=get_trading_menu_keyboard())
        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(F.text == "–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏")
async def trading_mode_select(message: Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [types.KeyboardButton(text="full")],
        [types.KeyboardButton(text="golden_squeeze")],
        [types.KeyboardButton(text="squeeze_only")], # <-- –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
        [types.KeyboardButton(text="golden_only")],
        [types.KeyboardButton(text="liquidation_only")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],

    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏:", reply_markup=kb)

@router.message(F.text.in_({"golden_only", "liquidation_only", "full", "squeeze_only", "golden_squeeze"}))
async def trading_mode_set(message: Message):
    user_id = str(message.from_user.id)
    all_state = load_user_state()
    user_data = all_state.get(user_id, {})
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
    # –ú—ã –¥–æ–±–∞–≤–∏–ª–∏ "squeeze_only" –≤ —Å–ø–∏—Å–æ–∫ —Ä–µ–∂–∏–º–æ–≤ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ –≤—ã—à–µ,
    # –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ—Ç –∫–æ–¥ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –Ω–µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    # –î–æ–±–∞–≤–ª—è–µ–º "golden_squeeze" –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ –±—ã–ª–æ.
    user_data["strategy_mode"] = message.text
    all_state[user_id] = user_data
    save_user_state(all_state)
    await message.answer(f"‚úÖ –†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ {message.text}", reply_markup=get_trading_menu_keyboard())

# --- –†–∞–∑–¥–µ–ª ¬´–ë–æ—Ç¬ª ---
@router.message(F.text == "–°—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–π")
async def bot_status(message: Message):
    summary = get_positions_summary(message.from_user.id)
    await message.answer(summary, reply_markup=get_bot_menu_keyboard(), parse_mode="HTML")

@router.message(F.text == "–†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã")
async def bot_sleep_toggle(message: Message):
    user_id = str(message.from_user.id)
    all_state = load_user_state()
    user_data = all_state.get(user_id, {})
    current = user_data.get("sleep_mode", False)
    user_data["sleep_mode"] = not current
    all_state[user_id] = user_data
    save_user_state(all_state)
    status = "–ê–ö–¢–ò–í–ò–†–û–í–ê–ù" if user_data["sleep_mode"] else "–û–¢–ö–õ–Æ–ß–Å–ù"
    await message.answer(f"–†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã {status}.", reply_markup=get_bot_menu_keyboard())

@router.message(F.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç")
async def bot_stop(message: Message):
    user_id = str(message.from_user.id)
    all_state = load_user_state()
    user_data = all_state.get(user_id, {})
    user_data["bot_active"] = False
    all_state[user_id] = user_data
    save_user_state(all_state)
    await message.answer("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=get_bot_menu_keyboard())

@router.message(F.text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç")
async def bot_start(message: Message):
    user_id = str(message.from_user.id)
    all_state = load_user_state()
    user_data = all_state.get(user_id, {})
    user_data["bot_active"] = True
    all_state[user_id] = user_data
    save_user_state(all_state)
    await message.answer("‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.", reply_markup=get_bot_menu_keyboard())

# --- –†–∞–∑–¥–µ–ª ¬´–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è¬ª ---
@router.message(F.text.lower() == "–¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ—à–µ–ª—å–∫—É")
async def info_wallet(message: Message):
    summary = get_wallet_summary(message.from_user.id)
    await message.answer(summary, reply_markup=get_info_menu_keyboard(), parse_mode="HTML")

@router.message(F.text == "–°–¥–µ–ª–∫–∏ –∑–∞ —Å—É—Ç–∫–∏")
async def info_trades_day(message: Message):
    await message.answer(_trades_change(24, message.from_user.id), reply_markup=get_info_menu_keyboard(), parse_mode="HTML")

@router.message(F.text == "–°–¥–µ–ª–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é")
async def info_trades_week(message: Message):
    await message.answer(_trades_change(24*7, message.from_user.id), reply_markup=get_info_menu_keyboard(), parse_mode="HTML")

@router.message(F.text == "–°–¥–µ–ª–∫–∏ –∑–∞ –º–µ—Å—è—Ü")
async def info_trades_month(message: Message):
    await message.answer(_trades_change(24*30, message.from_user.id), reply_markup=get_info_menu_keyboard(), parse_mode="HTML")

# --- –†–∞–∑–¥–µ–ª ¬´–°–µ—Ä–≤–∏—Å¬ª ---
@router.message(F.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def service_feedback_start(message: Message, state: FSMContext):
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")
    await state.set_state(FeedbackStates.waiting_message)

@router.message(FeedbackStates.waiting_message)
async def service_feedback_receive(message: Message, state: FSMContext):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π ID –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    if config.ADMIN_IDS:
        admin_chat_id = list(config.ADMIN_IDS)[0]
        try:
            await bot.send_message(admin_chat_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name} (ID: {message.from_user.id}):\n\n{message.text}")
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!", reply_markup=get_service_menu_keyboard())
        except Exception as e:
            logger.error(f"Could not send feedback to admin {admin_chat_id}: {e}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_service_menu_keyboard())
    else:
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.", reply_markup=get_service_menu_keyboard())
    await state.clear()

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ ---
@router.message(Command("set_trailing"))
async def set_trailing_cmd(message: Message):
    args = (message.text or "").split()[1:]
    if not args:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "<code>/set_trailing &lt;pct&gt;</code>\n"
            "<code>/set_trailing &lt;logic&gt; &lt;pct&gt;</code>\n"
            "<b>logic:</b> golden_only | liquidation_only | full",
            parse_mode="HTML"
        )
        return

    try:
        if len(args) == 1:
            pct = float(args[0])
            logic = None
        elif len(args) == 2:
            logic, pct_str = args
            if logic not in {"golden_only", "liquidation_only", "full"}:
                raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞.")
            pct = float(pct_str)
        else:
            raise ValueError("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")

        if not (0.5 <= pct <= 20):
            raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0.5‚Äì20 %.")

        user_id = str(message.from_user.id)
        all_state = load_user_state()
        ud = all_state.get(user_id, {})
        if logic is None:
            logic = ud.get("strategy_mode", "full")

        trailing_map = ud.get("trailing_start_pct", {})
        trailing_map[logic] = pct
        ud["trailing_start_pct"] = trailing_map
        all_state[user_id] = ud
        save_user_state(all_state)

        await message.answer(f"‚úÖ –ü–æ—Ä–æ–≥ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ <b>{logic}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ <b>{pct:.2f}%</b>", parse_mode="HTML")

    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@router.message(Command("set_gap"))
async def set_trailing_gap_cmd(message: Message):
    args = (message.text or "").split()[1:]
    if not args:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "<code>/set_gap &lt;pct&gt;</code>\n"
            "<code>/set_gap &lt;logic&gt; &lt;pct&gt;</code>\n"
            "<b>logic:</b> golden_only | liquidation_only | full",
            parse_mode="HTML"
        )
        return

    try:
        if len(args) == 1:
            pct = float(args[0])
            logic = None
        elif len(args) == 2:
            logic, pct_str = args
            if logic not in {"golden_only", "liquidation_only", "full"}:
                raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞.")
            pct = float(pct_str)
        else:
            raise ValueError("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")

        if not (0.1 <= pct <= 5):
            raise ValueError("–î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω 0.1‚Äì5 %.")

        user_id = str(message.from_user.id)
        all_state = load_user_state()
        ud = all_state.get(user_id, {})
        if logic is None:
            logic = ud.get("strategy_mode", "full")

        gap_map = ud.get("trailing_gap_pct", {})
        gap_map[logic] = pct
        ud["trailing_gap_pct"] = gap_map
        all_state[user_id] = ud
        save_user_state(all_state)

        await message.answer(f"‚úÖ –û—Ç—Å—Ç—É–ø —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –¥–ª—è <b>{logic}</b> —Ç–µ–ø–µ—Ä—å <b>{pct:.2f}%</b>", parse_mode="HTML")

    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")