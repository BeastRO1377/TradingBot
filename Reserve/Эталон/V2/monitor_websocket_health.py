#!/usr/bin/env python3
"""
WebSocket Health Monitor
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import logging
import time
import sys
from pathlib import Path
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

from websocket_monitor import get_monitor, print_connection_report, diagnose_connection_issues

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class WebSocketHealthMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    def __init__(self):
        self.monitor = get_monitor()
        self.running = False
        self.stats_history = []
        self.max_history = 100
        
    def log_health_status(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        summary = self.monitor.get_summary()
        issues = diagnose_connection_issues()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats_history.append({
            'timestamp': time.time(),
            'healthy_connections': summary['healthy_connections'],
            'total_connections': summary['total_connections'],
            'total_errors': summary['total_errors'],
            'total_reconnects': summary['total_reconnects']
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.stats_history) > self.max_history:
            self.stats_history.pop(0)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        healthy_ratio = summary['healthy_connections'] / max(summary['total_connections'], 1)
        
        if healthy_ratio >= 0.8:
            status = "üü¢ –û–¢–õ–ò–ß–ù–û"
        elif healthy_ratio >= 0.6:
            status = "üü° –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
        else:
            status = "üî¥ –ü–†–û–ë–õ–ï–ú–´"
        
        logger.info(f"WebSocket Health: {status} ({summary['healthy_connections']}/{summary['total_connections']} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        if issues['high_error_rate']:
            logger.warning(f"–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫: {len(issues['high_error_rate'])} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
        
        if issues['frequent_reconnects']:
            logger.warning(f"–ß–∞—Å—Ç—ã–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {len(issues['frequent_reconnects'])} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
        
        if issues['no_recent_activity']:
            logger.warning(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {len(issues['no_recent_activity'])} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
        
        if issues['ping_pong_issues']:
            logger.warning(f"–ü—Ä–æ–±–ª–µ–º—ã ping/pong: {len(issues['ping_pong_issues'])} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
    
    def get_health_trend(self, minutes: int = 10) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∏–Ω—É—Ç"""
        cutoff_time = time.time() - (minutes * 60)
        recent_stats = [s for s in self.stats_history if s['timestamp'] > cutoff_time]
        
        if len(recent_stats) < 2:
            return {'trend': 'insufficient_data', 'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥
        first = recent_stats[0]
        last = recent_stats[-1]
        
        healthy_change = last['healthy_connections'] - first['healthy_connections']
        error_change = last['total_errors'] - first['total_errors']
        reconnect_change = last['total_reconnects'] - first['total_reconnects']
        
        if healthy_change > 0 and error_change < 5 and reconnect_change < 3:
            trend = 'improving'
            message = '–°–æ—Å—Ç–æ—è–Ω–∏–µ —É–ª—É—á—à–∞–µ—Ç—Å—è'
        elif healthy_change < 0 or error_change > 10 or reconnect_change > 5:
            trend = 'degrading'
            message = '–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Ö—É–¥—à–∞–µ—Ç—Å—è'
        else:
            trend = 'stable'
            message = '–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ'
        
        return {
            'trend': trend,
            'message': message,
            'healthy_change': healthy_change,
            'error_change': error_change,
            'reconnect_change': reconnect_change,
            'data_points': len(recent_stats)
        }
    
    def print_detailed_report(self):
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        print("\n" + "="*80)
        print("DETAILED WEBSOCKET HEALTH REPORT")
        print("="*80)
        
        summary = self.monitor.get_summary()
        issues = diagnose_connection_issues()
        
        print(f"–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"–í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {summary['total_connections']}")
        print(f"–ó–¥–æ—Ä–æ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {summary['healthy_connections']}")
        print(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {summary['total_messages']}")
        print(f"–í—Å–µ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {summary['total_reconnects']}")
        print(f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {summary['total_errors']}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        trend = self.get_health_trend(10)
        print(f"\n–¢—Ä–µ–Ω–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç: {trend['message']}")
        if trend['data_points'] > 0:
            print(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {trend['healthy_change']:+d}")
            print(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫: {trend['error_change']:+d}")
            print(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {trend['reconnect_change']:+d}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º
        print(f"\n–î–µ—Ç–∞–ª–∏ –ø–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º:")
        for name, conn_info in summary['connections'].items():
            status = "‚úÖ –ó–î–û–†–û–í–û" if conn_info['healthy'] else "‚ùå –ü–†–û–ë–õ–ï–ú–´"
            uptime_hours = conn_info['uptime'] / 3600
            print(f"  {name}:")
            print(f"    –°—Ç–∞—Ç—É—Å: {status}")
            print(f"    –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_hours:.1f}—á")
            print(f"    –°–æ–æ–±—â–µ–Ω–∏–π: {conn_info['messages_received']}")
            print(f"    –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {conn_info['reconnects']}")
            print(f"    –û—à–∏–±–æ–∫: {conn_info['errors']}")
            if conn_info['last_error']:
                print(f"    –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {conn_info['last_error']}")
        
        # –ü—Ä–æ–±–ª–µ–º—ã
        if any(issues.values()):
            print(f"\n–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
            for issue_type, issue_list in issues.items():
                if issue_list:
                    print(f"  {issue_type}: {len(issue_list)} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
                    for issue in issue_list[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                        print(f"    - {issue}")
                    if len(issue_list) > 3:
                        print(f"    ... –∏ –µ—â–µ {len(issue_list) - 3}")
        
        print("="*80)
    
    async def start_monitoring(self, interval: int = 30):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"""
        logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}—Å)")
        self.running = True
        
        try:
            while self.running:
                self.log_health_status()
                await asyncio.sleep(interval)
        except KeyboardInterrupt:
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
        finally:
            self.running = False
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.running = False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = WebSocketHealthMonitor()
    
    print("WebSocket Health Monitor")
    print("=" * 50)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (30—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª)")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (60—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª)")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å")
        print("4. –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")
        print("5. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –∑–∞ 10 –º–∏–Ω—É—Ç")
        print("6. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-6): ").strip()
        
        if choice == "1":
            await monitor.start_monitoring(30)
        elif choice == "2":
            await monitor.start_monitoring(60)
        elif choice == "3":
            monitor.log_health_status()
        elif choice == "4":
            monitor.print_detailed_report()
        elif choice == "5":
            trend = monitor.get_health_trend(10)
            print(f"\n–¢—Ä–µ–Ω–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç:")
            print(f"  {trend['message']}")
            if trend['data_points'] > 0:
                print(f"  –ó–¥–æ—Ä–æ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {trend['healthy_change']:+d}")
                print(f"  –û—à–∏–±–∫–∏: {trend['error_change']:+d}")
                print(f"  –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {trend['reconnect_change']:+d}")
                print(f"  –¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {trend['data_points']}")
        elif choice == "6":
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        sys.exit(1)































