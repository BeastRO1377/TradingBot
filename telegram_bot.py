# telegram_bot.py
import csv
import json
import pathlib
import logging
import math
import re
import time
from datetime import datetime, timedelta

from aiogram import F, Router, types, Bot, Dispatcher
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup
from aiogram.filters import Command
from aiogram.enums import ParseMode

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
import config
import utils

logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram ---
# !!! –í–ê–ñ–ù–û: –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ –¢–û–ö–ï–ù –ù–ê –í–ê–® !!!
TELEGRAM_BOT_TOKEN = "5833594543:AAE8BXe2G3tmvZTixAHGhGKzJIPN66P64a4" 

try:
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    dp = Dispatcher()
    router = Router()
    router_admin = Router()
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
    dp.include_router(router)
    dp.include_router(router_admin)
except Exception as e:
    logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram Bot: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.")
    bot = None
    dp = None
    router = None
    router_admin = None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç–∞–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
GLOBAL_BOTS: list = []

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON ---

def load_user_state() -> dict:
    if config.USER_STATE_FILE.exists():
        with config.USER_STATE_FILE.open("r", encoding="utf-8") as fp:
            try:
                return json.load(fp)
            except json.JSONDecodeError:
                return {}
    return {}

def save_user_state(data: dict) -> None:
    with config.USER_STATE_FILE.open("w", encoding="utf-8") as fp:
        json.dump(data, fp, ensure_ascii=False, indent=4)

def _load_json(path: pathlib.Path):
    if path.exists():
        with path.open("r", encoding="utf-8") as fp:
            try:
                return json.load(fp)
            except json.JSONDecodeError:
                return None
    return None

def _user_slice(all_data: dict, user_id: int | str, default=None):
    if all_data is None:
        return default
    return all_data.get(str(user_id), default)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---

def _load_open_positions_from_csv() -> list[dict]:
    path = getattr(config, "TRADES_UNIFIED_CSV_PATH", config.ROOT_DIR / "trades_unified.csv")
    if not path.exists():
        return []
    positions: dict[str, dict] = {}
    try:
        with path.open("r", encoding="utf-8", newline="") as fp:
            reader = csv.DictReader(fp)
            for row in reader:
                symbol = row.get("symbol")
                event = str(row.get("event", "")).lower()
                if not symbol or event not in {"open", "close"}:
                    continue
                if event == "open":
                    positions[symbol] = row
                else:
                    positions.pop(symbol, None)
    except Exception as exc:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å trades_unified.csv: {exc}", exc_info=True)
        return []

    # –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å–ø–∏—Å–∫—É –∏ —É–ø–æ—Ä—è–¥–æ—á–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è
    def _parse_ts(value: str) -> float:
        try:
            return datetime.fromisoformat(value.replace("Z", "")).timestamp()
        except Exception:
            return 0.0

    result = []
    for symbol, row in positions.items():
        row = dict(row)
        row.setdefault("symbol", symbol)
        row["_ts"] = _parse_ts(row.get("timestamp", ""))
        result.append(row)
    result.sort(key=lambda r: r.get("_ts", 0.0))
    return result


def get_positions_summary(user_id: int) -> str:
    all_positions = _load_json(config.OPEN_POS_JSON)
    user_positions = _user_slice(all_positions, user_id, [])

    if not user_positions:
        user_positions = _load_open_positions_from_csv()

    if not user_positions:
        return "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π."

    lines = ["ü™ô <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:</b>"]
    for pos in user_positions:
        symbol = pos.get("symbol") or pos.get("Symbol") or "N/A"
        side = (pos.get("side") or pos.get("Side") or "").upper()
        qty = utils.safe_to_float(pos.get("volume") or pos.get("volume_trade") or pos.get("size") or 0.0)
        entry_price = utils.safe_to_float(pos.get("avg_price") or pos.get("price_trade") or pos.get("price") or 0.0)
        current_price = utils.safe_to_float(pos.get("current_price") or pos.get("last_price") or 0.0)
        stop_price = utils.safe_to_float(pos.get("last_stop_price") or pos.get("stopPrice") or 0.0)
        pnl_pct = utils.safe_to_float(pos.get("pnl_pct_est") or pos.get("pnl_pct") or 0.0)
        opened_at = pos.get("opened_at") or pos.get("timestamp") or pos.get("open_time")
        flags = []
        if pos.get("manual_mode"):
            flags.append("manual")
        if pos.get("adopted"):
            flags.append("adopted")

        parts = [f"‚Ä¢ <code>{symbol}</code> {side or '‚Äî'}"]
        if qty:
            parts.append(f"–æ–±—ä—ë–º {qty:.3f}")
        if entry_price:
            parts.append(f"–≤—Ö–æ–¥ {entry_price:.6f}")
        if current_price:
            parts.append(f"—Ç–µ–∫ {current_price:.6f}")
        if stop_price:
            parts.append(f"—Å—Ç–æ–ø {stop_price:.6f}")
        if math.isfinite(pnl_pct) and pnl_pct:
            parts.append(f"PnL {pnl_pct:+.2f}%")
        if opened_at:
            parts.append(str(opened_at))
        if flags:
            parts.append(", ".join(flags))

        lines.append(" | ".join(parts))

    return "\n".join(lines)

def _load_wallet_from_log() -> dict | None:
    path = getattr(config, "WALLET_LOG_FILE", config.ROOT_DIR / "wallet_state.log")
    if not path.exists() or path.stat().st_size == 0:
        return None

    try:
        lines = path.read_text(encoding="utf-8").splitlines()
    except Exception as exc:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å wallet_state.log: {exc}", exc_info=True)
        return None

    pattern = re.compile(r"IM\s*=\s*(?P<im>[-+]?\d+(?:\.\d+)?)")
    for line in reversed(lines):
        match = pattern.search(line)
        if match:
            return {"initial_margin": utils.safe_to_float(match.group("im"))}
    return None


def get_wallet_summary(user_id: int) -> str:
    all_wallets = _load_json(config.WALLET_JSON)
    wallet = _user_slice(all_wallets, user_id, {})
    if wallet:
        bal = wallet.get("totalEquity")
        avail = wallet.get("availableBalance")
        used = wallet.get("usedMargin")
        updated = wallet.get("timestamp")

        def _fmt(val):
            try:
                num = float(val)
                if math.isfinite(num):
                    return f"{num:.2f}"
            except (TypeError, ValueError):
                pass
            return str(val) if val not in (None, "") else "‚Äî"

        lines = ["üí∞ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞</b>"]
        lines.append(f"Equity: <code>{_fmt(bal)}</code>")
        lines.append(f"Available: <code>{_fmt(avail)}</code>")
        lines.append(f"Used margin: <code>{_fmt(used)}</code>")
        if updated:
            lines.append(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}")
        return "\n".join(lines)

    snapshot = _load_wallet_from_log()
    if snapshot:
        im = snapshot.get("initial_margin")
        return (
            "üí∞ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞</b>\n"
            f"Initial Margin: <code>{im:.2f} USDT</code>"
        )

    return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞."

def load_user_config(user_id: int) -> dict:
    return load_user_state().get(str(user_id), {}).copy()


def format_settings_snapshot(user_id: int) -> str:
    cfg = load_user_config(user_id)
    if not cfg:
        return "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."

    volume = utils.safe_to_float(cfg.get("volume", 0.0))
    max_total = utils.safe_to_float(cfg.get("max_total_volume", 0.0))
    strategy_mode = cfg.get("strategy_mode", "full")
    trailing_mode = cfg.get("trailing_mode") or getattr(config, "ACTIVE_TRAILING_MODE", "adaptive")
    trading_mode = cfg.get("mode", "demo").upper()
    bot_active = cfg.get("bot_active", True)
    sleep_mode = cfg.get("sleep_mode", False)

    trailing_start = cfg.get("trailing_start_pct") or {}
    trailing_gap = cfg.get("trailing_gap_pct") or {}
    modes_to_show = sorted(set([strategy_mode, *trailing_start.keys(), *trailing_gap.keys()]))

    strict_defaults = getattr(config, "ML_STRICT_FILTERS", {})
    user_strict = cfg.get("ML_STRICT_FILTERS") or {}
    strict_enabled = bool(user_strict.get("ENABLED", strict_defaults.get("ENABLED", True)))
    strict_min = utils.safe_to_float(user_strict.get("MIN_WORKING_ML", strict_defaults.get("MIN_WORKING_ML", 0.33)))
    strict_max = utils.safe_to_float(user_strict.get("MAX_WORKING_ML", strict_defaults.get("MAX_WORKING_ML", 0.85)))

    lines = [
        "‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>",
        f"–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: <code>{trading_mode}</code>",
        f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: <code>{strategy_mode}</code>",
        f"–†–µ–∂–∏–º —Ç—Ä–µ–π–ª–∏–Ω–≥–∞: <code>{trailing_mode}</code>",
        f"–õ–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–∏: <b>{volume:.0f} USDT</b>",
        f"–õ–∏–º–∏—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è: <b>{max_total:.0f} USDT</b>",
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞: <b>{'–ó–∞–ø—É—â–µ–Ω' if bot_active else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</b>",
        f"–†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã: <b>{'–í–ö–õ' if sleep_mode else '–í–´–ö–õ'}</b>",
        f"ML —Ñ–∏–ª—å—Ç—Ä—ã: <b>{'–í–ö–õ' if strict_enabled else '–í–´–ö–õ'}</b> (—Ä–∞–±–æ—á–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω {strict_min:.2f}‚Äì{strict_max:.2f})",
    ]

    if modes_to_show:
        lines.append("\nüéØ <b>–ü—Ä–æ—Ñ–∏–ª–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞</b>")
        for mode in modes_to_show:
            start_val = trailing_start.get(mode)
            gap_val = trailing_gap.get(mode)
            parts = []
            if start_val is not None:
                parts.append(f"—Å—Ç–∞—Ä—Ç {start_val:.2f}%")
            if gap_val is not None:
                parts.append(f"gap {gap_val:.2f}%")
            detail = ", ".join(parts) if parts else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            lines.append(f"‚Ä¢ {mode}: {detail}")

    return "\n".join(lines)


def format_pnl_change(hours: int) -> str:
    path = getattr(config, "TRADES_UNIFIED_CSV_PATH", config.ROOT_DIR / "trades_unified.csv")
    if not path.exists():
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö."

    cutoff = datetime.utcnow() - timedelta(hours=hours)
    total_pnl = 0.0
    trades = 0
    wins = 0
    best = None
    worst = None

    try:
        with path.open("r", encoding="utf-8", newline="") as fp:
            reader = csv.DictReader(fp)
            for row in reader:
                if str(row.get("event", "")).lower() != "close":
                    continue
                ts = row.get("timestamp")
                if not ts:
                    continue
                try:
                    trade_dt = datetime.fromisoformat(ts.replace("Z", ""))
                except ValueError:
                    continue
                if trade_dt < cutoff:
                    continue
                pnl = utils.safe_to_float(row.get("pnl_usdt"))
                if not math.isfinite(pnl):
                    continue
                trades += 1
                total_pnl += pnl
                if pnl > 0:
                    wins += 1
                if best is None or pnl > best:
                    best = pnl
                if worst is None or pnl < worst:
                    worst = pnl
    except Exception as exc:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å trades_unified.csv: {exc}", exc_info=True)
        return "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ —Å–¥–µ–ª–æ–∫."

    if trades == 0:
        return "–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

    avg_pnl = total_pnl / trades
    win_rate = (wins / trades) * 100 if trades else 0.0
    period_start = cutoff.strftime("%d.%m %H:%M")
    period_end = datetime.utcnow().strftime("%d.%m %H:%M")

    summary = [
        f"–ü–µ—Ä–∏–æ–¥: <code>{period_start} ‚Äî {period_end} UTC</code>",
        f"–°–¥–µ–ª–æ–∫: <b>{trades}</b>",
        f"PnL: <b>{total_pnl:+.2f} USDT</b>",
        f"Win rate: <b>{win_rate:.1f}%</b>",
        f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{avg_pnl:+.2f} USDT</b>",
    ]
    if best is not None and worst is not None:
        summary.append(f"–õ—É—á—à–∏–π / —Ö—É–¥—à–∏–π: <code>{best:+.2f} / {worst:+.2f}</code>")
    return "\n".join(summary)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

STRATEGY_MODES = [
    "full",
    "golden_squeeze",
    "golden_only",
    "liquidation_only",
    "squeeze_only",
    "dom_squeeze_only",
]

TRAILING_MODES_AVAILABLE = ["adaptive", "dynamic", "simple_gap"]


def get_main_menu_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        [types.KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å"), types.KeyboardButton(text="üìà –û—Ç—á—ë—Ç—ã")],
        [types.KeyboardButton(text="üõ† –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [types.KeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º"), types.KeyboardButton(text="üÜò –°–µ—Ä–≤–∏—Å")],
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


def get_status_menu_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        [types.KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"), types.KeyboardButton(text="–î–∞–Ω–Ω—ã–µ –ø–æ –∫–æ—à–µ–ª—å–∫—É")],
        [types.KeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


def get_settings_menu_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        [types.KeyboardButton(text="–û–±—â–∏–π –ª–∏–º–∏—Ç"), types.KeyboardButton(text="–õ–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–∏")],
        [types.KeyboardButton(text="–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏"), types.KeyboardButton(text="–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞")],
        [types.KeyboardButton(text="–†–µ–∂–∏–º —Ç—Ä–µ–π–ª–∏–Ω–≥–∞")],
        [types.KeyboardButton(text="–¢—Ä–µ–π–ª–∏–Ω–≥: –ü–æ—Ä–æ–≥"), types.KeyboardButton(text="–¢—Ä–µ–π–ª–∏–Ω–≥: –û—Ç—Å—Ç—É–ø")],
        [types.KeyboardButton(text="API –∫–ª—é—á–∏")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


def get_trailing_logic_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    cfg = load_user_config(user_id)
    stored_modes = set((cfg.get("trailing_start_pct") or {}).keys()) | set((cfg.get("trailing_gap_pct") or {}).keys())
    rows = [[types.KeyboardButton(text=mode)] for mode in sorted(set([*stored_modes, *STRATEGY_MODES]))]
    rows.append([types.KeyboardButton(text="–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")])
    rows.append([types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)


def get_bot_control_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        [types.KeyboardButton(text="–†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã"), types.KeyboardButton(text="ML —Ñ–∏–ª—å—Ç—Ä—ã")],
        [types.KeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç"), types.KeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


def get_reports_menu_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        [types.KeyboardButton(text="PnL –∑–∞ 24—á"), types.KeyboardButton(text="PnL –∑–∞ 7–¥")],
        [types.KeyboardButton(text="PnL –∑–∞ 30–¥")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


def get_service_menu_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        [types.KeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

# --- FSM –°—Ç–µ–π—Ç—ã ---

class UpdateAPIStates(StatesGroup):
    waiting_api_key = State()
    waiting_api_secret = State()

class MaxVolumeStates(StatesGroup):
    waiting_max_volume = State()

class PositionVolumeStates(StatesGroup):
    waiting_volume = State()

class FeedbackStates(StatesGroup):
    waiting_message = State()

class TrailingConfigStates(StatesGroup):
    waiting_logic = State()
    waiting_value = State()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –º–µ–Ω—é ---

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_keyboard())

# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é ---
@router.message(F.text == "üìä –°—Ç–∞—Ç—É—Å")
async def show_status_menu(message: Message):
    await message.answer("–†–∞–∑–¥–µ–ª ¬´–°—Ç–∞—Ç—É—Å¬ª", reply_markup=get_status_menu_keyboard())


@router.message(F.text == "üõ† –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings_menu(message: Message):
    await message.answer("–†–∞–∑–¥–µ–ª ¬´–¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏¬ª", reply_markup=get_settings_menu_keyboard())


@router.message(F.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º")
async def show_bot_control_menu(message: Message):
    await message.answer("–†–∞–∑–¥–µ–ª ¬´–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º¬ª", reply_markup=get_bot_control_keyboard())


@router.message(F.text == "üìà –û—Ç—á—ë—Ç—ã")
async def show_reports_menu(message: Message):
    await message.answer("–†–∞–∑–¥–µ–ª ¬´–û—Ç—á—ë—Ç—ã¬ª", reply_markup=get_reports_menu_keyboard())


@router.message(F.text == "üÜò –°–µ—Ä–≤–∏—Å")
async def show_service_menu(message: Message):
    await message.answer("–†–∞–∑–¥–µ–ª ¬´–°–µ—Ä–≤–∏—Å¬ª", reply_markup=get_service_menu_keyboard())


@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_keyboard())

# --- –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
@router.message(F.text == "API –∫–ª—é—á–∏")
async def trading_update_api(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API_KEY:")
    await state.set_state(UpdateAPIStates.waiting_api_key)

@router.message(UpdateAPIStates.waiting_api_key)
async def trading_update_api_key(message: Message, state: FSMContext):
    await state.update_data(new_api_key=message.text.strip())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API_SECRET:")
    await state.set_state(UpdateAPIStates.waiting_api_secret)

@router.message(UpdateAPIStates.waiting_api_secret)
async def trading_update_api_secret(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = str(message.from_user.id)
    all_state = load_user_state()
    user_data = all_state.get(user_id, {})
    user_data["api_key"] = data["new_api_key"]
    user_data["api_secret"] = message.text.strip()
    all_state[user_id] = user_data
    save_user_state(all_state)
    await message.answer("‚úÖ –ö–ª—é—á–∏ API –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=get_settings_menu_keyboard())
    await state.clear()

@router.message(F.text == "–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞")
async def trading_mode_menu(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ '–ë–æ–µ–≤–æ–π' –∏–ª–∏ '–î–µ–º–æ'.
    """
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [types.KeyboardButton(text="–ë–æ–µ–≤–æ–π (Real)")],
        [types.KeyboardButton(text="–î–µ–º–æ (Demo)")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ])
    
    user_id = str(message.from_user.id)
    all_state = load_user_state()
    current_mode = all_state.get(user_id, {}).get("mode", "real")
    
    await message.answer(
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: <b>{current_mode.upper()}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º. <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–∏–ª—É "
        "–ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )

@router.message(F.text.in_({"–ë–æ–µ–≤–æ–π (Real)", "–î–µ–º–æ (Demo)"}))
async def trading_set_mode(message: Message):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤ user_state.json.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    new_mode = "real" if "Real" in message.text else "demo"
    
    user_id = str(message.from_user.id)
    all_state = load_user_state()
    user_data = all_state.get(user_id, {})
    
    user_data["mode"] = new_mode
    all_state[user_id] = user_data
    save_user_state(all_state)
    
    await message.answer(
        f"‚úÖ –†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ <b>{new_mode.upper()}</b>.\n\n"
        "‚ÄºÔ∏è <b>–¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–õ–ù–´–ô –ü–ï–†–ï–ó–ê–ü–£–°–ö –ë–û–¢–ê</b>, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É.",
        reply_markup=get_settings_menu_keyboard(),
        parse_mode=ParseMode.HTML
    )



@router.message(F.text == "–û–±—â–∏–π –ª–∏–º–∏—Ç")
async def trading_max_volume(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ–±—â–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –æ–±—ä—ë–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5000):")
    await state.set_state(MaxVolumeStates.waiting_max_volume)

@router.message(MaxVolumeStates.waiting_max_volume)
async def trading_set_max_volume(message: Message, state: FSMContext):
    try:
        max_vol = float(message.text.replace(",", "."))
        user_id = str(message.from_user.id)
        all_state = load_user_state()
        user_data = all_state.get(user_id, {})
        user_data["max_total_volume"] = max_vol
        all_state[user_id] = user_data
        save_user_state(all_state)
        await message.answer(f"‚úÖ –û–±—â–∏–π –ª–∏–º–∏—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {max_vol}", reply_markup=get_settings_menu_keyboard())
        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(F.text == "–õ–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–∏")
async def trading_position_volume(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ–±—ä—ë–º –¥–ª—è –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000):")
    await state.set_state(PositionVolumeStates.waiting_volume)

@router.message(PositionVolumeStates.waiting_volume)
async def trading_set_position_volume(message: Message, state: FSMContext):
    try:
        vol = float(message.text.replace(",", "."))
        user_id = str(message.from_user.id)
        all_state = load_user_state()
        user_data = all_state.get(user_id, {})
        user_data["volume"] = vol
        all_state[user_id] = user_data
        save_user_state(all_state)
        await message.answer(f"‚úÖ –õ–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {vol}", reply_markup=get_settings_menu_keyboard())
        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(F.text == "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
async def trading_mode_select(message: Message):
    rows = [[types.KeyboardButton(text=mode)] for mode in STRATEGY_MODES]
    rows.append([types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=rows)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏:", reply_markup=kb)

@router.message(F.text.in_(set(STRATEGY_MODES)))
async def trading_mode_set(message: Message):
    user_id = str(message.from_user.id)
    all_state = load_user_state()
    user_data = all_state.get(user_id, {})
    
    user_data["strategy_mode"] = message.text
    all_state[user_id] = user_data
    save_user_state(all_state)
    await message.answer(f"‚úÖ –†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ {message.text}", reply_markup=get_settings_menu_keyboard())


@router.message(F.text == "–†–µ–∂–∏–º —Ç—Ä–µ–π–ª–∏–Ω–≥–∞")
async def trailing_mode_menu(message: Message):
    cfg = load_user_config(message.from_user.id)
    current = cfg.get("trailing_mode") or getattr(config, "ACTIVE_TRAILING_MODE", "adaptive")
    rows = [[types.KeyboardButton(text=mode)] for mode in TRAILING_MODES_AVAILABLE]
    rows.append([types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    kb = ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)
    await message.answer(
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: <b>{current}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç—Ä–µ–π–ª–∏–Ω–≥–∞:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML,
    )


@router.message(F.text.in_(set(TRAILING_MODES_AVAILABLE)))
async def trailing_mode_set(message: Message):
    new_mode = message.text.strip()
    user_id = str(message.from_user.id)
    all_state = load_user_state()
    user_data = all_state.get(user_id, {})
    user_data["trailing_mode"] = new_mode
    all_state[user_id] = user_data
    save_user_state(all_state)
    await message.answer(
        f"‚úÖ –†–µ–∂–∏–º —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{new_mode}</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_settings_menu_keyboard(),
    )


@router.message(F.text.in_({"–¢—Ä–µ–π–ª–∏–Ω–≥: –ü–æ—Ä–æ–≥", "–¢—Ä–µ–π–ª–∏–Ω–≥: –û—Ç—Å—Ç—É–ø"}))
async def trailing_metric_entry(message: Message, state: FSMContext):
    metric = "start" if "–ü–æ—Ä–æ–≥" in message.text else "gap"
    await state.clear()
    await state.update_data(trailing_metric=metric)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç—Ä–µ–π–ª–∏–Ω–≥–∞:",
        reply_markup=get_trailing_logic_keyboard(message.from_user.id),
    )
    await state.set_state(TrailingConfigStates.waiting_logic)


@router.message(TrailingConfigStates.waiting_logic)
async def trailing_metric_choose_logic(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã.", reply_markup=get_settings_menu_keyboard())
        return

    cfg = load_user_config(message.from_user.id)
    if text == "–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è":
        logic = cfg.get("strategy_mode", "full")
    else:
        logic = text

    data = await state.get_data()
    metric = data.get("trailing_metric", "start")
    await state.update_data(selected_logic=logic)

    prompt = (
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0.5 ‚Äì 20):"
        if metric == "start"
        else "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç—Å—Ç—É–ø —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0.1 ‚Äì 5):"
    )

    await message.answer(prompt, reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(TrailingConfigStates.waiting_value)


@router.message(TrailingConfigStates.waiting_value)
async def trailing_metric_set_value(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    if text.lower() in {"–æ—Ç–º–µ–Ω–∞", "cancel", "–Ω–∞–∑–∞–¥"}:
        await state.clear()
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_settings_menu_keyboard())
        return

    try:
        value = float(text.replace(",", "."))
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    data = await state.get_data()
    logic = data.get("selected_logic")
    metric = data.get("trailing_metric", "start")

    if not logic:
        await state.clear()
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é. –ù–∞—á–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.", reply_markup=get_settings_menu_keyboard())
        return

    if metric == "start" and not (0.5 <= value <= 20):
        await message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0.5 ‚Äì 20.")
        return
    if metric == "gap" and not (0.1 <= value <= 5):
        await message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0.1 ‚Äì 5.")
        return

    user_id = str(message.from_user.id)
    all_state = load_user_state()
    user_data = all_state.get(user_id, {})

    key = "trailing_start_pct" if metric == "start" else "trailing_gap_pct"
    mapping = user_data.get(key, {})
    mapping[logic] = value
    user_data[key] = mapping
    all_state[user_id] = user_data
    save_user_state(all_state)
    await state.clear()

    label = "–ü–æ—Ä–æ–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏" if metric == "start" else "–û—Ç—Å—Ç—É–ø"
    await message.answer(
        f"‚úÖ {label} –¥–ª—è <b>{logic}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ <b>{value:.2f}%</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_settings_menu_keyboard(),
    )

# --- –°—Ç–∞—Ç—É—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ---
@router.message(F.text == "–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
async def bot_status(message: Message):
    summary = get_positions_summary(message.from_user.id)
    await message.answer(summary, reply_markup=get_status_menu_keyboard(), parse_mode="HTML")


@router.message(F.text == "–î–∞–Ω–Ω—ã–µ –ø–æ –∫–æ—à–µ–ª—å–∫—É")
async def info_wallet(message: Message):
    summary = get_wallet_summary(message.from_user.id)
    await message.answer(summary, reply_markup=get_status_menu_keyboard(), parse_mode="HTML")


@router.message(F.text == "–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
async def info_settings_snapshot(message: Message):
    summary = format_settings_snapshot(message.from_user.id)
    await message.answer(summary, reply_markup=get_status_menu_keyboard(), parse_mode="HTML")


@router.message(F.text == "–†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã")
async def bot_sleep_toggle(message: Message):
    user_id = str(message.from_user.id)
    all_state = load_user_state()
    user_data = all_state.get(user_id, {})
    current = user_data.get("sleep_mode", False)
    user_data["sleep_mode"] = not current
    all_state[user_id] = user_data
    save_user_state(all_state)
    status = "–ê–ö–¢–ò–í–ò–†–û–í–ê–ù" if user_data["sleep_mode"] else "–û–¢–ö–õ–Æ–ß–Å–ù"
    await message.answer(f"–†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã {status}.", reply_markup=get_bot_control_keyboard())


@router.message(F.text == "ML —Ñ–∏–ª—å—Ç—Ä—ã")
async def ml_filters_toggle(message: Message):
    user_id = str(message.from_user.id)
    all_state = load_user_state()
    user_data = all_state.get(user_id, {})
    strict_defaults = getattr(config, "ML_STRICT_FILTERS", {})
    strict_cfg = user_data.get("ML_STRICT_FILTERS") or {}
    current = bool(strict_cfg.get("ENABLED", strict_defaults.get("ENABLED", True)))
    new_state = not current
    strict_cfg["ENABLED"] = new_state
    user_data["ML_STRICT_FILTERS"] = strict_cfg
    all_state[user_id] = user_data
    save_user_state(all_state)
    min_ml = utils.safe_to_float(strict_cfg.get("MIN_WORKING_ML", strict_defaults.get("MIN_WORKING_ML", 0.33)))
    max_ml = utils.safe_to_float(strict_cfg.get("MAX_WORKING_ML", strict_defaults.get("MAX_WORKING_ML", 0.85)))
    status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    await message.answer(
        f"ML —Ñ–∏–ª—å—Ç—Ä—ã {status_text.upper()}. –†–∞–±–æ—á–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω {min_ml:.2f}‚Äì{max_ml:.2f}.",
        reply_markup=get_bot_control_keyboard(),
    )


@router.message(F.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç")
async def bot_stop(message: Message):
    user_id = str(message.from_user.id)
    all_state = load_user_state()
    user_data = all_state.get(user_id, {})
    user_data["bot_active"] = False
    all_state[user_id] = user_data
    save_user_state(all_state)
    await message.answer("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=get_bot_control_keyboard())


@router.message(F.text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç")
async def bot_start(message: Message):
    user_id = str(message.from_user.id)
    all_state = load_user_state()
    user_data = all_state.get(user_id, {})
    user_data["bot_active"] = True
    all_state[user_id] = user_data
    save_user_state(all_state)
    await message.answer("‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.", reply_markup=get_bot_control_keyboard())


# --- –†–∞–∑–¥–µ–ª ¬´–û—Ç—á—ë—Ç—ã¬ª ---
@router.message(F.text == "PnL –∑–∞ 24—á")
async def info_trades_day(message: Message):
    await message.answer(
        format_pnl_change(24),
        reply_markup=get_reports_menu_keyboard(),
        parse_mode="HTML",
    )


@router.message(F.text == "PnL –∑–∞ 7–¥")
async def info_trades_week(message: Message):
    await message.answer(
        format_pnl_change(24 * 7),
        reply_markup=get_reports_menu_keyboard(),
        parse_mode="HTML",
    )


@router.message(F.text == "PnL –∑–∞ 30–¥")
async def info_trades_month(message: Message):
    await message.answer(
        format_pnl_change(24 * 30),
        reply_markup=get_reports_menu_keyboard(),
        parse_mode="HTML",
    )

# --- –†–∞–∑–¥–µ–ª ¬´–°–µ—Ä–≤–∏—Å¬ª ---
@router.message(F.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def service_feedback_start(message: Message, state: FSMContext):
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")
    await state.set_state(FeedbackStates.waiting_message)

@router.message(FeedbackStates.waiting_message)
async def service_feedback_receive(message: Message, state: FSMContext):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π ID –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    if config.ADMIN_IDS:
        admin_chat_id = list(config.ADMIN_IDS)[0]
        try:
            await bot.send_message(admin_chat_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name} (ID: {message.from_user.id}):\n\n{message.text}")
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!", reply_markup=get_service_menu_keyboard())
        except Exception as e:
            logger.error(f"Could not send feedback to admin {admin_chat_id}: {e}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_service_menu_keyboard())
    else:
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.", reply_markup=get_service_menu_keyboard())
    await state.clear()

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ ---
@router.message(Command("set_trailing"))
async def set_trailing_cmd(message: Message):
    args = (message.text or "").split()[1:]
    if not args:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "<code>/set_trailing &lt;pct&gt;</code>\n"
            "<code>/set_trailing &lt;logic&gt; &lt;pct&gt;</code>\n"
            "<b>logic:</b> golden_only | liquidation_only | full",
            parse_mode="HTML"
        )
        return

    try:
        if len(args) == 1:
            pct = float(args[0])
            logic = None
        elif len(args) == 2:
            logic, pct_str = args
            if logic not in {"golden_only", "liquidation_only", "full"}:
                raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞.")
            pct = float(pct_str)
        else:
            raise ValueError("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")

        if not (0.5 <= pct <= 20):
            raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0.5‚Äì20 %.")

        user_id = str(message.from_user.id)
        all_state = load_user_state()
        ud = all_state.get(user_id, {})
        if logic is None:
            logic = ud.get("strategy_mode", "full")

        trailing_map = ud.get("trailing_start_pct", {})
        trailing_map[logic] = pct
        ud["trailing_start_pct"] = trailing_map
        all_state[user_id] = ud
        save_user_state(all_state)

        await message.answer(f"‚úÖ –ü–æ—Ä–æ–≥ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ <b>{logic}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ <b>{pct:.2f}%</b>", parse_mode="HTML")

    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@router.message(Command("set_gap"))
async def set_trailing_gap_cmd(message: Message):
    args = (message.text or "").split()[1:]
    if not args:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "<code>/set_gap &lt;pct&gt;</code>\n"
            "<code>/set_gap &lt;logic&gt; &lt;pct&gt;</code>\n"
            "<b>logic:</b> golden_only | liquidation_only | full",
            parse_mode="HTML"
        )
        return

    try:
        if len(args) == 1:
            pct = float(args[0])
            logic = None
        elif len(args) == 2:
            logic, pct_str = args
            if logic not in {"golden_only", "liquidation_only", "full"}:
                raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞.")
            pct = float(pct_str)
        else:
            raise ValueError("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")

        if not (0.1 <= pct <= 5):
            raise ValueError("–î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω 0.1‚Äì5 %.")

        user_id = str(message.from_user.id)
        all_state = load_user_state()
        ud = all_state.get(user_id, {})
        if logic is None:
            logic = ud.get("strategy_mode", "full")

        gap_map = ud.get("trailing_gap_pct", {})
        gap_map[logic] = pct
        ud["trailing_gap_pct"] = gap_map
        all_state[user_id] = ud
        save_user_state(all_state)

        await message.answer(f"‚úÖ –û—Ç—Å—Ç—É–ø —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –¥–ª—è <b>{logic}</b> —Ç–µ–ø–µ—Ä—å <b>{pct:.2f}%</b>", parse_mode="HTML")

    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
